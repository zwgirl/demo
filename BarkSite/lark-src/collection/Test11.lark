package collection;

import java.util.ArrayList;
import java.util.Collection; 
import java.util.List;
import java.util.ObservableCollection;

import org.w3c.event.Event;
import org.w3c.event.EventHandler;
import org.w3c.event.MouseEvent;
import org.w3c.event.MouseEventHandler;
 
public class Test11 implements Page, INotifyPropertyChanged {
	<%
	<html xmlns:lark = "http://www.lark.org/2012"> 
		<head> 
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> 
		<meta http-equiv="pragma" content="no-cache" /> 
		<meta http-equiv="cache-control" content="no-cache, must-revalidate" /> 
		<meta http-equiv="expires" content="wed, 26 feb 1997 08:21:57 gmt" /> 
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> 
		<style type="text/css"> 
			body,table{ 
				font-size:12px; 
			} 
			table{ 
				table-layout:fixed; 
				empty-cells:show; 
				border-collapse: collapse; 
//				margin:0 auto; 
			} 
			td{ 
				height:30px; 
			} 
			h1,h2,h3{ 
				font-size:12px; 
				margin:0; 
				padding:0; 
			} 
			.table{ 
				border:1px solid #cad9ea; 
				color:#666; 
			} 
			.table th { 
				background-repeat:repeat-x; 
				height:30px; 
			} 
			.table td,.table th{ 
				border:1px solid #cad9ea; 
				padding:0 1em 0; 
			} 
			.table tr.alter{ 
				background-color:#f5fafe; 
			} 
		</style> 
		</head>
		<body > 
			<If data={Binding property="flag" }>
				<p>
				IF Tag Output 
				</p> 
				<h1>  h1 </h1>
			</If> 
	
			<p>Choose </p>
			<Choose data={Binding property="age" }>
				<When value=71>
					<h1>  When value=71 </h1>
				</When>
				<Otherwise>
					<h1>  Otherwise </h1>
				</Otherwise>
			</Choose>
			<br />
			<br />
			<input type="text" value = {Binding property = "name" mode="TwoWay" trigger="PropertyChanged"} />
			<input type="text" value = {Binding property = "name" mode="TwoWay" trigger="PropertyChanged"} />
			
			<br />
			<br />
			<h1> 迭代器 </h1>
			<table border="1"> 
			<thead class="tabs" >
				<tr>
				<td ></td> 
				<td>序号</td><td>姓名</td> <td>地址</td><td > 年龄</td> <td> SVG Name </td>
				</tr> 
		    </thead> 

			<tbody class="tabs" >
				<Iterator items = {Binding property="persons"}>
					<TableRow />
				</Iterator>
		    </tbody>
				
			<tbody>
				<tr >
				<td colSpan=3> 
					<button onclick="addChild"  >
						新增
					</button>
				</td>
				<td colSpan=3> 
					<button onclick = "deleteChild" >
						删除 
					</button> 
				</td>
				</tr>
			</tbody>
		</table>

			<svg width="500" height="200" style="2121">
				<line x1="20" y1="180" x2="400" y2="180" style="stroke:black;stroke-width:1px;"/>
				<XAxis />
				<line x1="20" y1="180" x2="20" y2="10" style="stroke:black;stroke-width:1px;"/>
				<text x="1" y="150">10</text>
				<text x="1" y="120">20</text>
				<text x="1" y="90">30</text>
				<text x="1" y="60">40</text>
				<text x="1" y="30">50</text>
				
				<rect x="40" y="110"  width="20" height.baseVal.value={Binding property="age" mode="OneTime"} fill = "red" />
				<rect x="90" y="10"  width="20" height="170" fill = "blue" /> 
				<rect x="140" y="80"  width="20" height="100" fill = "green" /> 
				<rect x="190" y="70"  width="20" height="110" fill = "red" /> 
				<rect x="240" y="150"  width="20" height="30" fill = "red" /> 
			</svg>
		</body> 
	</html>
	%> 

	/**
	*@see Test11#name
	 */ 
	public Test11(){
		_persons.add(new Person("1", "张三", "山东高密", 65));
		_persons.add(new Manager("2", "财务部经理", "河南安阳", 65));
		_persons.add(new Person("3", "李四", "山西大同", 65));
		_persons.add(new Person("4", "王小五", "湖北武汉", 65));
		_persons.add(new Manager("5", "人力资源经理", "广东广州", 65));
	}
	
	private String _name = "测试文本";
	
	public String name{
		&{
			return this._name;
		}
		+{
			if(this._name === value){
				return;
			}
			this._name = value;
			notifyChanged("name");
		}
	}
	
	private boolean _flag = true;
	public boolean flag{
		&{
			return this._flag;
		}
		+{
			if(this._flag === value){
				return;
			}
			this._flag = value;
			notifyChanged("flag");
		}
	}
	
	private int _age = 70;
	public int age{
		&{
			return this._age;
		}
		+{
			if(this._age === value){
				return;
			}
			this._age = value;
			notifyChanged("age");
		}
	}
	
	private int _width = 18;
	public int width{
		&{
			return this._width;
		}
		+{
			if(this._width === value){
				return;
			}
			this._width = value;
			notifyChanged("width");
		}
	}
	
	private int _height = 18;
	public int height{
		&{
			return this._height;
		}
		+{
			if(this._height === value){
				return;
			}
			this._height = value;
			notifyChanged("height");
		}
	}
	
	private Collection<Person> _persons = new ObservableCollection<>();
	public Collection<Person> persons{
		&{
			return this._persons;
		}
		+{
			this._persons = value; 
		}
	}
	 
	public MouseEventHandler addChild = (MouseEvent event)->{
		persons.add(new Manager("child1", "新增张三", "山东高密新增", 35));
	};
	 
	public MouseEventHandler deleteChild =  (MouseEvent event)->{
		List<Person> toBeDeleted = new ArrayList<Person>();
		for(Person p : persons){
			if(p.selected){
				toBeDeleted.add(p);
			} 
		}
		
		if(toBeDeleted.size>0){
			persons.removeAll(toBeDeleted);
		}
	};
} 

