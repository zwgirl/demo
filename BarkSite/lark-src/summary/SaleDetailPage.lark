package summary;

import java.util.ArrayList;
import java.util.List;
import java.util.ObservableCollection;

import org.w3c.dom.Node;
import org.w3c.event.MouseEvent;
import org.w3c.event.MouseEventHandler;

public class SaleDetailPage implements Page, INotifyPropertyChanged {
	<%
	<html xmlns:lark = "http://www.lark.org/2012">
		<head> 
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> 
			<style>
			.rect {
			    border: 5px solid red;   
			}  
			</style>
		</head>
		<body >
		<table> 
			<thead className="tabs" >
				<tr>
				<td ><input type="checkbox" checked = {Binding property = "allSelected" mode="TwoWay" trigger="PropertyChanged"} /></td> 
				<td>序号</td><td>品名</td> <td>数量</td><td>单价</td><td onmouseover=function{return false;}> 小计</td> 
				</tr> 
		    </thead> 
			<tbody className="tabs" template = {CollectionTemplateSetting property = "saleDetails" template = "Record" }>
		    </tbody>
			<tbody className="tabs" id="1111" >
				<tr>
					<td colSpan=4> 总计 </td>
					<td textContent={Binding property = "grandTotal" mode="OneWay"}> 0.0 </td>
				</tr>
			</tbody>
		</table>		
		<button onclick="add" >
			新增
		</button>
		<button onclick = "delete">
			删除 
		</button> 
			<a href="/lark/summary/Hello.html" route={Router page="Hello"}>测试</a>
			
		<button onclick = function{location.href="/lark/summary/Hello.html"; return false;}>
			隐藏 
		</button> 
		</body> 
		
	</html>
	%>
	
	public SaleDetailPage(){
		_saleDetails.addCollectionChangedListener((Object sender, CollectionChangedEvent<SaleDetail> event)->{
			switch(event.action){
			case Add:
			case Move:
			case Remove:
			case Replace:
			case Reset:
				notifyChanged("grandTotal");
			}
		});
	}
	
	boolean flag = false;
	MouseEventHandler fold = (MouseEvent event)->{
		if(flag){
			document.getElementById("1111").style.display="table-row-group";
		} else {
			document.getElementById("1111").style.display="none";
		}
		flag = !flag;
	};
	
	PropertyChange changeHandler = (Object source, PropertyChangeEvent evt)->{
		notifyChanged("grandTotal");
	};
	
	private int _ordinal = 0;
	public int ordinal{
		&{
			console.log("ordinal:" + this._ordinal);
			return this._ordinal++;
		}
	}
	
	private ObservableCollection<SaleDetail> _saleDetails = new ObservableCollection<>();
	{
		SaleDetail sd = new SaleDetail("产品11", 23.4, 3);
		sd.addPropertyChangeListener("summary", changeHandler);
		_saleDetails.add(sd);
		
		sd = new SaleDetail("产品12", 23.4, 3);
		sd.addPropertyChangeListener("summary", changeHandler);
		_saleDetails.add(sd);
		
		sd = new SaleDetail("产品13", 23.4, 3);
		sd.addPropertyChangeListener("summary", changeHandler);
		_saleDetails.add(sd);
		
		sd = new SaleDetail("产品14", 23.4, 3);
		sd.addPropertyChangeListener("summary", changeHandler);
		_saleDetails.add(sd);
	}
	public ObservableCollection<SaleDetail> saleDetails{
		&{
			return this._saleDetails;
		}
		+{
			this._saleDetails = value; 
		}
	}
	
	public double grandTotal{
		&{
			double r = 0;
			for(SaleDetail sd:_saleDetails){
				r += sd.summary; 
			}
			return r;
		}
	}
	 
	public MouseEventHandler add = (MouseEvent event)->{
		SaleDetail sd = new SaleDetail("产品11", 23.4, 3);
		sd.addPropertyChangeListener("summary", changeHandler);
		_saleDetails.add(sd);
	};
	 
	public MouseEventHandler delete =  (MouseEvent event)->{
		List<SaleDetail> toBeDeleted = new ArrayList<SaleDetail>();
//		for(SaleDetail p : _saleDetails){
//			if(p.selected){
//				toBeDeleted.add(p);
//			} 
//		}
		
		if(toBeDeleted.size>0){
			_saleDetails.removeAll(toBeDeleted);
		}
	};

}

class Record extends Template {
	<%
	<tr >
		<td>
		<input type="checkbox" />
		</td>
		<td dataContext={DataContext property="ordinal" mode="Root"} textContent = {Binding}>
		</td>
		<td>
			<input type="text" value = {Binding property="name" mode="TwoWay" trigger="PropertyChanged"}/>
		</td>
		<td>
			<input type="text" value = {Binding property="quantity" mode="TwoWay" trigger="PropertyChanged"}/>
		</td> 
		<td textContent = {Binding property="unitPrice"}></td>  
		<td textContent = {Binding property="summary" mode="OneWay"}></td>
		<td>
			<a href="javascript:void(0)" onclick = "click"> X </a>
		</td>
	</tr> 
	%>
	
	MouseEventHandler click = (MouseEvent event)->{
		Node node = (Node) event.target;
		((ObservableCollection<SaleDetail>)this.templateSetting.dataItem).remove(node.dataContext.dataItem);
	};
}

class SaleDetail implements INotifyPropertyChanged{
	private double _unitPrice;
	private int _quantity;
	private String _name;
	
	public SaleDetail(String name, double unitPrice, int quantity){
		this._name = name;
		this._unitPrice = unitPrice;
		this._quantity = quantity;
		addPropertyChangeListener4(new String[]{"quantity", "unitPrice"}, changeHandler);
	}
	
	public String name{
		&{
			return this._name;
		}
		+{
			this._name = value;
			notifyChanged("name");
		}
	}
	
	public double unitPrice{
		&{
			return this._unitPrice;
		}
		+{
			this._unitPrice = value;
			notifyChanged("unitPrice");
		}
	}

	public int quantity{
		&{
			return this._quantity;
		}
		+{
			this._quantity = value;
			notifyChanged("quantity");
		}
	}

	public double summary{
		&{
			return this._quantity * this._unitPrice;
		}
		+{
			notifyChanged("summary");
		}
	}
	
	PropertyChange changeHandler = (Object source, PropertyChangeEvent evt)->{
		this.summary = 0;
	};
}
