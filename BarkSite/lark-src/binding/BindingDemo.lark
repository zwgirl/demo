package binding;


public class BindingDemo implements Page, INotifyPropertyChanged, PropertyChangeListener{
	<%
	<html > 
	    <head>
	    	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
	        <title>Binding Demo</title>
	        <style> 
		        progress {  
		            background-color: #f3f3f3;  
		            border: 0;  
		            height: 18px;  
		            border-radius: 9px;  
		        } 
		        
		        .rect{
		        	width:5px;
		        	height:5px;
		        	border:5px solid gray;
		        	border-radius: 25px;
		        }
		        
		        .color{
		        	width:115px;
		        	height:115px;
		        	border:5px solid gray;
		        	border-radius: 25px; 
		        }
	        </style>
	    </head>
	
	    <body>
	    	<form>
	    		<fieldset>
	    			输入数字:<input name="number1" type="number" value={Binding property="count" mode="TwoWay" trigger="PropertyChanged"} min="0" max="100" step="1"/>
	    			选择数值：<input name="range1" type="range" value={Binding property="count" mode="TwoWay" trigger="PropertyChanged"}  min="0"  max="100" step="1"/>
	    			<progress value={Binding property="count" mode="TwoWay" trigger="PropertyChanged"} max=100></progress>
	    		</fieldset>
	    	</form>
			<div className = "rect" style.width = {Binding property="length" mode="OneWay" updateTargetCallback="callback"}
				style.height = {Binding property="length" mode="OneWay" } >
				<label id="font" style.fontSize = {Binding property="length" mode="OneWay"} style.fontSize = "1px"> 字体尺寸 </label>
			</div>
			
			<label>红 </label><input name="red1" type="range" value={Binding property="red" mode="TwoWay" trigger="PropertyChanged"} min="0" max="255" step="1"/>
			<br/>
			<label>绿 </label><input name="green1" type="range" value={Binding property="green" mode="TwoWay" trigger="PropertyChanged"} min="0" max="255" step="1"/>
			<br/>
			<label>兰 </label><input name="blue1" type="range" value={Binding property="blue" mode="TwoWay" trigger="PropertyChanged"} min="0" max="255" step="1"/>
			<br/>
			
			<div class="color" style.backgroundColor = {Binding property="color" mode="OneWay"} />
			<span textContent={Binding property="color" mode="OneWay"}> </span>
        </body>
	</html>
	%>
	
	
	public BindingDemo() {
		addPropertyChangeListener("count", this::propertyChange);
		addPropertyChangeListener("red", this::propertyChange);
		addPropertyChangeListener("green", this::propertyChange);
		addPropertyChangeListener("blue", this::propertyChange);
	}
	
	UpdateTargetCallback callback = (Object target, String tagProperty1, String tagProperty2, Object value) ->{
		target[tagProperty1][tagProperty2] = window.getComputedStyle(document.getElementById("font"), null).width;
	};
	
	private int _count;
	public int count {
		&{ return this._count; }
		+{
			if(this._count === value)
				return;
			this._count = value;
			notifyChanged("count");
		}
	}
	
	private String _length;
	public String length {
		&{ return this._length;}
		+{
			if(this._length === value)
				return;
	
			this._length = value;
			notifyChanged("length");
		}
	}
	
	private int _red;
	public int red {
		&{return this._red; }
		+{
			if(this._red === value) return;
			this._red = value;
			notifyChanged("red");
		}
	}
	
	private int _blue;
	public int blue {
		&{ return this._blue; }
		+{
			if(this._blue === value) return;
			this._blue = value;
			notifyChanged("blue");
		}
	}
	
	private int _green;
	public int green {
		&{ return this._green; }
		+{
			if(this._green === value) return;
			this._green = value;
			notifyChanged("green");
		}
	}
	
	private String _color;
	public String color {
		&{ return this._color; }
		+{
			if(this._color === value) return;
			this._color = value;
			notifyChanged("color");
		}
	}
	
	public void propertyChange(Object source, PropertyChangeEvent evt) {
		if(evt.property == "count"){
			this.length = source[evt.property] + "px";
		} else if (evt.property == "red" || evt.property == "green" || evt.property == "blue"){
			this.color = "rgb(" + this._red + "," + this.green + "," + this._blue + ")";
		}
	}
}
