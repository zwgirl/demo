import java.util.ArrayList;
import java.util.Collection; 
import java.util.List;
import java.util.ObservableCollection;

import org.w3c.event.Event;
import org.w3c.event.EventHandler;
import org.w3c.html.*;

import org.w3c.svg.*;
 
public class Test implements Page, INotifyPropertyChanged {
	<%
	<html>
		<head> 
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> 
			<style>
			.rect {
			    border: 5px solid red;   
			}  
			</style> 
			
		</head> 
		<body >    
			<table> 
			<thead className="tabs" >
				<tr>
				<td ><input type="checkbox" checked = {Binding property = "allSelected" mode="TwoWay" trigger="PropertyChanged"} /></td> 
				<td>序号</td><td>姓名</td> <td>地址</td><td onmouseover=function{return false;}> 年龄</td> 
				</tr> 
		    </thead> 
			<tbody className="tabs" template = {CollectionTemplateSetting property = "persons" selector = "FirstTemplateSelector" }>
		    </tbody>
		</table>
		<button onclick="addChild"  >
			新增
		</button>
		<button onclick = "deleteChild"  onmouseover=function{String name="aaa"; return false;}> 
			删除 
		</button> 
			<{ 

			}>
			
			<{  
//				HTMLElement e = (HTMLElement) document.getElementById("1");
//				e.addEventListener("blur", (Event e1) ->{
//					return false;
//				}, false);
			}>
		
		<button onclick = "nextPage">
			下一页
		</button>
			


			<svg width="500" height="200">
			
				<line x1="20" y1="180" x2="20" y2="10" style="stroke:black;stroke-width:1px;"/>
				<line x1="20" y1="180" x2="400" y2="180" style="stroke:black;stroke-width:1px;"/>
				<text x="30" y="200">2001</text>
				<text x="80" y="200">2002</text>
				<text x="130" y="200">2003</text>
				<text x="180" y="200">2004</text>
				<text x="230" y="200">2004</text>
				
				<text x="1" y="150">10</text>
				<text x="1" y="120">20</text>
				<text x="1" y="90">30</text>
				<text x="1" y="60">40</text>
				<text x="1" y="30">50</text>
				
				<rect x="40" y="110"  width="20" height="70" fill = "red" />
				<rect x="90" y="10"  width="20" height="170" fill = "blue" /> 
				<rect x="140" y="80"  width="20" height="100" fill = "green" />
				<rect x="190" y="70"  width="20" height="110" fill = "red" />
				<rect x="240" y="150"  width="20" height="30" fill = "red" />


			</svg>
			
		</body> 
		 
	</html>
		%>
		
//        var rect = document.createElementNS("http://www.w3.org/2000/svg", 'rect');
//        rect.setAttributeNS(null, 'x', x);
//        rect.setAttributeNS(null, 'y', y);
//        rect.setAttributeNS(null, 'width', wd);
//        rect.setAttributeNS(null, 'height', ht);
//        rect.setAttributeNS(null, 'fill', "red");
//        svg.appendChild(rect);
	    // On y Axis
//        for (var i = 0; i < totalLabelOnYAxis +1; i++) {
//            markerVal = i * numMarkers;
//            markerValHt = i * numMarkers * svgcHeight;
//            var xMarkers = svgcMarginSpace - 5;
//            var yMarkers = svgcMarginHeight - (markerValHt / maximumDataValue);
//
//            textelement = document.createElementNS("http://www.w3.org/2000/svg", 'text');
//            textelement.setAttribute('dx', xMarkers-40);
//            textelement.setAttribute('dy',yMarkers);
//            txtnode = document.createTextNode(markerVal);
//            textelement.appendChild(txtnode);
//            svg.appendChild(textelement);
//        }
//
//        //On x Axis
//        for (var i = 0; i < totalChartBars; i++) {
//            arrVal = populationArray[i].split(",");
//            name = arrVal[0];
//            markerXPosition = svgcMarginSpace + bcMargin + (i * (bcWidth + bcMargin)) + (bcWidth / 2);
//            markerYPosition = svgcMarginHeight + 20;
//
//            textelement = document.createElementNS("http://www.w3.org/2000/svg", 'text');
//            textelement.setAttribute('dx', markerXPosition);
//            textelement.setAttribute('dy', markerYPosition);
//            txtnode = document.createTextNode(name);
//            textelement.appendChild(txtnode);
//            svg.appendChild(textelement);
//        }

		/**
		*@see Test#name
		 */ 
		public Test(){
			_persons.add(new Person("1", "张三", "山东高密", 65));
			_persons.add(new Manager("4", "经理3", "山东高密2", 65));
			_persons.add(new Person("2", "张三1", "山东高密1", 65));
			_persons.add(new Person("3", "张三2", "山东高密2", 65));
			_persons.add(new Manager("4", "经理111", "山东高密2", 65));
		}
		
		private String _name = "sss";
		
		public String name{
			&{
				return this._name;
			}
			+{
				if(this._name === value){
					return;
				}
				this._name = value;
				notifyChanged("name");
			}
		}
		
		private int _age = 18;
		public int age{
			&{
				return this._age;
			}
			+{
				if(this._age === value){
					return;
				}
				this._age = value;
				notifyChanged("age");
			}
		}
		
		private int _width = 18;
		public int width{
			&{
				return this._width;
			}
			+{
				if(this._width === value){
					return;
				}
				this._width = value;
				notifyChanged("width");
			}
		}
		
		private int _height = 18;
		public int height{
			&{
				return this._height;
			}
			+{
				if(this._height === value){
					return;
				}
				this._height = value;
				notifyChanged("height");
			}
		}
		
		EventHandler h = (Event e)->{
			alert("Hello world");
		};
		
		@Override
		public String toString() {
			return this._name + "2" + "; age : " + this._age;
		}
		
		public ConverterFunction to=(Object data) ->{
			return data + "px";
		};
		
		public ConverterFunction from=(Object data) ->{
			return data;
		};
		
		private Collection<Person> _persons = new ObservableCollection<>();
		public Collection<Person> persons{
			&{
				return this._persons;
			}
			+{
				this._persons = value; 
			}
		}
		 
		public EventHandler addChild = (Event event)->{
			persons.add(new Manager("child1", "新增张三", "山东高密新增", 35));
		};
		 
		public EventHandler deleteChild =  (Event event)->{
			List<Person> toBeDeleted = new ArrayList<Person>();
			for(Person p : persons){
				if(p.selected){
					toBeDeleted.add(p);
				} 
			}
			
			if(toBeDeleted.size>0){
				persons.removeAll(toBeDeleted);
			}
		};
		
		public EventHandler nextPage =  (Event event)->{
			ObservableCollection<Person> nextPage = new ObservableCollection<Person>();
			nextPage.add(new Person("11" + Math.random(), "张三1" + Math.random(), "山东高密", 65));
			nextPage.add(new Person("21" + Math.random(), "张三11" + Math.random(), "山东高密1", 65));
			nextPage.add(new Person("31" + Math.random(), "张三21" + Math.random(), "山东高密2", 65));
			nextPage.add(new Person("41" + Math.random(), "张三31" + Math.random(), "山东高密2", 65)); 
			
			if(persons != null){ 
				persons.clear(); 
			}
			persons.addAll(nextPage);  
		};
		
		native void  ggg() /*-{
		
		}-*/;
} 

class FirstTemplateSelector extends TemplateSelector{

	@Override
	protected Template doSelect(Object data) {
		if(data instanceof Manager){
			return new ManagerTableRow();
		}  else if(data instanceof Person){
			return new TableRow();
		}
		return null;
	}
	
}

