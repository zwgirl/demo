package examples;

import org.w3c.html.*;
import base.PropertyChangedSupport;

public class helloWorld extends PropertyChangedSupport { 
	<%
	<html> 
		<head>
		<meta httpEquiv="Content-Type" content="text/html; charset=utf-8" />
		<title>Knockout : Hello World example</title>
		<link href="../css/tripoli.simple.css" type="text/css" rel="stylesheet" />
		<link rel="stylesheet" type="text/css" href="../css/styles.css" /> 
		<link rel="stylesheet" type="text/css" href="../css/smallScreen.css"
			media="only screen and (max-device-width: 800px)" />
		<link rel="shortcut icon" href="../img/favicon.ico" />
		<script type="text/javascript" src="../js/jquery-1.11.1.min.js"></script>
		<script type="text/javascript" src="../js/cufon-yui.js"></script>
		<script type="text/javascript" src="../js/titilliummaps.font.js"></script>
		<script type="text/javascript" src="../js/json2.js"></script>
		<script type="text/javascript"
			src="../js/syntaxhighlighter/scripts/shCore.js"></script>
		<script type="text/javascript"
			src="../js/syntaxhighlighter/scripts/shBrushJava.js"></script>
		<script type="text/javascript"
			src="../js/syntaxhighlighter/scripts/shBrushXml.js"></script>
		<script type="text/javascript"
			src="../js/syntaxhighlighter/scripts/shBrushBash.js"></script>
		<link type="text/css" rel="stylesheet"
			href="../js/syntaxhighlighter/styles/shThemeFadeToGrey.css" />
		
		<script type="text/javascript">
			$(function() {
				// Fancy fonts
				Cufon.replace('.titillium');
				Cufon.replace('.engraved', {
					textShadow : 'rgba(253, 224, 217, 0.45) 1.2px 1px'
				});
		
				// Syntax highlighting
				$("pre > code").each(function() {
					var codeText = $(this).text();
					$(this).parent().text(codeText).addClass("brush:js");
				});
				SyntaxHighlighter.defaults['toolbar'] = false;
				SyntaxHighlighter.defaults['gutter'] = false;
				SyntaxHighlighter.all();
		
				// Highlight current top menu item
				var desiredMenuItem = '' || 'examples';
				$(".main-menu a[rel=" + desiredMenuItem + "]").addClass("active");
		
				// Highlight current left-hand-nav menu item
				var urlFilename = location.href.match(/\/([^\/]+)$/);
				if (urlFilename) {
					$(".leftColContents li:has(a[href$='" + urlFilename[1] + "'])")
							.addClass("active");
				}
			});
		</script>
		
		</head>
		<body>
			<div id="wrapper">
				<div className="vspace"></div>
				<div className="main-menu">
					<ul>
						<li><a rel="home" href="../index.html">Home</a></li>
						<li><a rel="installation" href="../downloads/index.html">Download
								/ Install</a></li>
						<li><a rel="tutorials" href="http://learn.knockoutjs.com/">Tutorials</a></li>
						<li><a rel="examples" href="../examples/">Live examples</a></li>
						<li><a rel="documentation"
							href="../documentation/introduction.html">Documentation</a></li>
						<li><a href="http://groups.google.com/group/knockoutjs">Forum</a></li>
						<li><a href="http://github.com/SteveSanderson/knockout">Source</a></li>
					</ul>
				</div>
				<div className="clear"></div>
				<div className="vspace"></div>
				<div>
					<div className="leftCol">
						<div className="leftColBackground">&nbsp;</div>
						<div className="leftColContents">
							<h1>Introductory examples</h1>
							<ul>
								<li><strong><a href="helloWorld.html">Hello
											world</a></strong> <small>Working with <code>ko.observable</code>
										&amp; <code>ko.computed</code></small></li>
								<li><strong><a href="clickCounter.html">Click
											counter</a></strong> <small>Using declarative bindings and how KO
										tracks dependencies automatically</small></li>
								<li><strong><a href="simpleList.html">Simple
											list</a></strong> <small>Working with <code>ko.observableArray</code></small>
								</li>
								<li><strong><a href="betterList.html">Better
											list</a></strong> <small>Combining more behaviors</small></li>
								<li><strong><a href="controlTypes.html">Control
											types</a></strong> <small>Reference: All HTML control types</small></li>
								<li><strong><a href="collections.html">Working
											with Collections</a></strong> <small>Working with arrays, including
										nested ones</small></li>
								<li><strong><a href="grid.html">Paged grid</a></strong> <small>Creating
										reusable components, i.e., plugins</small></li>
								<li><strong><a href="animatedTransitions.html">Animated
											transitions</a></strong> <small>Two simple ways to implement
										animated transitions (one of which is a custom binding)</small></li>
							</ul>
		
							<h1>Detailed examples</h1>
							<ul>
								<li><strong><a href="contactsEditor.html">Contacts
											editor</a></strong> <small>Editing a nested list</small></li>
								<li><strong><a href="gridEditor.html">Editable
											grid</a></strong> <small>Using the 'foreach' binding and integrating
										with jQuery Validation</small></li>
								<li><strong><a href="cartEditor.html">Shopping
											cart screen</a></strong> <small>Includes nested dropdowns and a
										string formatting function</small></li>
							</ul>
						</div>
					</div>
					<div className="rightCol">
						<div className="example sticker">
							<div className="content">
								<h1>Hello World example</h1>
								<p>
									In this example, the two text boxes are bound to <em>observable</em>
									variables on a data model. The “full name” display is bound to a
									<em>computed observable</em>, whose value is calculated in terms
									of the observables.
								</p>
		
								<p>Edit either text box to see the “full name” display update.
									See the HTML source code and notice there’s no need to catch
									“onchange” events. Knockout knows when to update the UI.</p>
		
								<h2>Live example</h2>
								<div className="liveExample">
									<p>
										First name: <input value ={Binding property="firstName" mode="TwoWay" updateSourceTrigger = "LostFocus" }  />
									</p>
									<p>
										Last name: <input value ={Binding property="lastName" mode="TwoWay" updateSourceTrigger = "PropertyChanged" } />
									</p>
									<h2>
										Hello, <span textContent = {Binding property= "fullName" mode="OneWay"}> </span>!
									</h2>
								</div>
		
								<h2>Source code: View</h2>
							<pre className="brush:java">
							package examples;

							import org.w3c.html.*;
							import base.PropertyChangedSupport;

							public class helloWorld extends PropertyChangedSupport { 

								&lt;html&gt; 
									&lt;head&gt;
									&lt;meta httpEquiv="Content-Type" content="text/html; charset=utf-8" /&gt;
									&lt;title&gt;Knockout : Hello World example&lt;/title&gt;
									&lt;/head&gt;
									&lt;body&gt;
										&lt;div className="liveExample"&gt;
											&lt;p&gt;
												First name: &lt;input value ={Binding property="firstName" mode="TwoWay" updateSourceTrigger = "LostFocus" }  /&gt;
											&lt;/p&gt;
											&lt;p&gt;
												Last name: &lt;input value ={Binding property="lastName" mode="TwoWay" updateSourceTrigger = "PropertyChanged" } /&gt;
											&lt;/p&gt;
											&lt;h2&gt;
												Hello, &lt;span textContent = {Binding property= "fullName" mode="OneWay"}&gt; &lt;/span&gt;!
											&lt;/h2&gt;
										&lt;/div&gt;
									&lt;/body&gt;
								&lt;/html&gt;

								public helloWorld(){
									//侦听firstName属性的变化
									this.addPropertyChangeListener("firstName", (Object source, PropertyChangeEvent evt)->{
											this.fullName = firstName +" " + lastName;
									});
									
									//侦听lastName属性的变化
									this.addPropertyChangeListener("lastName", (Object source, PropertyChangeEvent evt)->{
											this.fullName = firstName +" " + lastName;
									});
								}
								
								private String _firstName;
								public String firstName{
									&{       //相当于getFirstName()
										return this._firstName;
									}
									+{     //等价于setFirstName(String value)
										String oldValue = this._firstName;
										this._firstName == value;
										if(oldValue != value){
											notify(this, new PropertyChangeEvent("firstName"));
										}
									}
								 }
								
								 private String _lastName;
								 public String lastName{
										&{
											return this._lastName;
										}
										+{
											String oldValue = this._lastName;
											this._lastName = value;
											if(oldValue !== value){
												notify(this, new PropertyChangeEvent("lastName"));
											}
										}
								 }
									 
								 private String _fullName;
								 public String fullName{
										&{
											return this._fullName;
										}
										+{
											String oldValue = this._fullName;
											this._fullName = value;
											if(oldValue != value){
												notify(this, new PropertyChangeEvent("fullName"));
											}
										}
								 }
							}
							</pre>
							
							</div>
							<div className="clear"></div>
						</div>
					</div>
				</div>
				<div className="clear"></div>
				<div className="main-menu">
					<ul>
						<li><a rel="home" href="../index.html">Home</a></li>
						<li><a rel="installation" href="../downloads/index.html">Download
								/ Install</a></li>
						<li><a rel="tutorials" href="http://learn.knockoutjs.com/">Tutorials</a></li>
						<li><a rel="examples" href="../examples/">Live examples</a></li>
						<li><a rel="documentation"
							href="../documentation/introduction.html">Documentation</a></li>
						<li><a href="http://groups.google.com/group/knockoutjs">Forum</a></li>
						<li><a href="http://github.com/SteveSanderson/knockout">Source</a></li>
					</ul>
				</div>
				<div className="clear"></div>
			</div>
		
			<div id="page-footer">(c) knockoutjs.com</div>
		</body>
	</html>
	
	%>
	
	public helloWorld(){
		//侦听firstName属性的变化
		this.addPropertyChangeListener("firstName", (Object source, PropertyChangeEvent evt)->{
				this.fullName = firstName +" " + lastName;
		});
		
		//侦听lastName属性的变化
		this.addPropertyChangeListener("lastName", (Object source, PropertyChangeEvent evt)->{
				this.fullName = firstName +" " + lastName;
		});
	}
	
	private String _firstName;
	public String firstName{
		&{       //相当于getFirstName()
			return this._firstName;
		}
		+{     //等价于setFirstName(String value)
			String oldValue = this._firstName;
			this._firstName = value;
			if(oldValue !== value){
				notify(this, new PropertyChangeEvent("firstName"));
			}
		}
	 }
	 private String _lastName;
	 public String lastName{
			&{
				return this._lastName;
			}
			+{
				String oldValue = this._lastName;
				this._lastName = value;
				if(oldValue !== value){
					notify(this, new PropertyChangeEvent("lastName"));
				}
			}
	 }
		 
	 private String _fullName;
	 public String fullName{
			&{
				return this._fullName;
			}
			+{
				String oldValue = this._fullName;
				this._fullName = value;
				if(oldValue !== value){
					notify(this, new PropertyChangeEvent("fullName"));
				}
			}
	 }
}
