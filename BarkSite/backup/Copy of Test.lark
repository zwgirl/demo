import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.ObservableCollection;

import org.w3c.event.Event;
import org.w3c.event.EventHandler;
import org.w3c.html.*;
import org.w3c.*;

public class Test implements Page, INotifyPropertyChanged {
	<%
	<html>
		<head>  
		<meta httpEquiv="Content-Type" content="text/html; charset=utf-8" />
			<style>
			.rect {
			    border: 5px solid red;
			}  
			</style>
		</head>  
		<body >    
			<!--
			akshajshakjsha
	
		sasasasa 
			<p id = {Binding}>
				<span>xidada </span><input type="text" value={Binding mode= "OneWay" trace = true} /><input type="text" value={Binding property="name" mode="TwoWay" trigger="PropertyChanged" converterFrom="from"} />
				<input type="text" value={Binding property="age" mode="TwoWay" trigger="PropertyChanged"} />
			</p>
			
			<input type="range" value={Binding property="width" mode="TwoWay" trigger="PropertyChanged"} min="0" max="255" step="1" />
			<input type="range" value={Binding property="height" mode="TwoWay" trigger="PropertyChanged"}  min="0" max="255" step="1"/>
			
			<div className = "rect" style.width = {Binding property="width" mode="OneWay" converterTo="to"}
					style.height = {Binding property="height" mode="OneWay" converterTo="to"} >
			<label  style.fontSize = {Binding property="width" mode="OneWay" converterTo="to"} style.fontSize = "11px" >
				字体尺寸
			</label> 
		</div>
			<div template = {TemplateSetting template="MyTemplate"}>
			</div>
			-->
			<table> 
			<thead className="tabs" >
				<td >

					<input x:name = "select" type="checkbox" checked = {Binding property = "allSelected" mode="TwoWay" trigger="PropertyChanged"} />
				</td> 
				<td>
					序号
				</td>
				<td>
					姓名
				</td> 
				<td>
					地址
				</td> 
				<td>
					年龄
				</td> 
		    </thead>
			<tbody className="tabs" template = {CollectionTemplateSetting property = "persons" template="TableRow"}>
		    </tbody>
		</table>
		<button onclick="addChild">
			新增
		</button>
		<button onclick = "deleteChild">
			删除
		</button>
		
		<button onclick = "nextPage">
			下一页
		</button>
		</body>
	</html>
		%>
		
		public Test(){
			_persons.add(new Person("1", "张三", "山东高密", 65));
			_persons.add(new Person("2", "张三1", "山东高密1", 65));
			_persons.add(new Person("3", "张三2", "山东高密2", 65));
			_persons.add(new Person("4", "张三3", "山东高密2", 65));
		}
		
		private String _name = "sss";
		
		public String name{
			&{
				return this._name;
			}
			+{
				if(this._name === value){
					return;
				}
				this._name = value;
				notifyChanged("name");
			}
		}
		
		private int _age = 18;
		public int age{
			&{
				return this._age;
			}
			+{
				if(this._age === value){
					return;
				}
				this._age = value;
				notifyChanged("age");
			}
		}
		
		private int _width = 18;
		public int width{
			&{
				return this._width;
			}
			+{
				if(this._width === value){
					return;
				}
				this._width = value;
				notifyChanged("width");
			}
		}
		
		private int _height = 18;
		public int height{
			&{
				return this._height;
			}
			+{
				if(this._height === value){
					return;
				}
				this._height = value;
				notifyChanged("height");
			}
		}
		
		EventHandler h = (Event e)->{
			alert("Hello world");
		};
		
		@Override
		public String toString() {
			return this._name + "2" + "; age : " + this._age;
		}
		
		public ConverterFunction to=(Object data) ->{
			return data + "px";
		};
		
		public ConverterFunction from=(Object data) ->{
			return data;
		};
		
		private Collection<Person> _persons = new ObservableCollection<>();
		public Collection<Person> persons{
			&{
				return this._persons;
			}
			+{
				this._persons = value;
			}
		}
		
		public EventHandler addChild = (Event event)->{
			persons.add(new Person("child1", "新增张三", "山东高密新增", 35));
		};
		 
		public EventHandler deleteChild =  (Event event)->{
			List<Person> toBeDeleted = new ArrayList<Person>();
			for(Person p : persons){
				if(p.selected){
					toBeDeleted.add(p);
				}
			}
			
			if(toBeDeleted.size>0){
				persons.removeAll(toBeDeleted);
			}
		};
		
		public EventHandler nextPage =  (Event event)->{
			ObservableCollection<Person> nextPage = new ObservableCollection<Person>();
			nextPage.add(new Person("11" + Math.random(), "张三1" + Math.random(), "山东高密", 65));
			nextPage.add(new Person("21" + Math.random(), "张三11" + Math.random(), "山东高密1", 65));
			nextPage.add(new Person("31" + Math.random(), "张三21" + Math.random(), "山东高密2", 65));
			nextPage.add(new Person("41" + Math.random(), "张三31" + Math.random(), "山东高密2", 65)); 
			
			if(persons != null){ 
				persons.clear(); 
			}
			persons.addAll(nextPage); 
		};
		
		native void  ggg() /*-{
		
		}-*/;
} 

