package remoting2;

@RemotingBean
public class Person implements INotifyPropertyChanged {

	public Person(String _name, int _age, String _address, String _photoPath, Person _parent) {
		this._name=_name;
		this._age = _age;
		this._address = _address;
		this._photoPath=_photoPath;
		this._parent = _parent;
	}

	private Person _parent;
	public Person parent {
		&{
			return this._parent;
		}
		+{
			if(this._parent == value){
				return;
			}
			this._parent = value;
			notify(this, new PropertyChangeEvent("parent"));
		}
	}

	private String _name;
	public String name {
		&{
			return this._name;
		}
		+{
			if(this._name === value){
				return;
			}
			this._name = value;
			notify(this, new PropertyChangeEvent("name"));
		}
	}
	
	private int _age;
	public int age {
		&{
			return this._age;
		}
		+{
			if(this._age === value){
				return;
			}
			this._age = value;
			notify(this, new PropertyChangeEvent("age"));
		}
	}
	
	private String _address;
	public String address {
		&{
			return this._address;
		}
		+{
			if(this._address === value){
				return;
			}
			this._address = value;
			notify(this, new PropertyChangeEvent("address"));
		}
	}
	
	private String _photoPath;
	public String photoPath {
		&{
			return this._photoPath;
		}
		+{
			if(this._photoPath === value){
				return;
			}
			this._photoPath = value;
			notify(this, new PropertyChangeEvent("photoPath"));
		}
	}
	private transient Object listeners= new Object();
	
	protected void notify(Object source, PropertyChangeEvent event){
		PropertyChange[] handlers = (PropertyChange[])listeners[event.propertyName];
		if(handlers != undefined){
			handlers.forEach((PropertyChange value, int index, Array<PropertyChange> array)->{
				value(source, event);
			});
		}
	}    

	public void addPropertyChangeListener(String propName, PropertyChange handler) {
		PropertyChange[] handlers = (PropertyChange[])listeners[propName];
		if(handlers == undefined){
			handlers = new Array<PropertyChange>();
			listeners[propName] = handlers;
		}
		handlers.push(handler);
	}

	public void removePropertyChangeListener(String propName, PropertyChange handler) {
		PropertyChange[] handlers = (PropertyChange[])listeners[propName];
		if(handlers != undefined){
			handlers.forEach((PropertyChange value, int index, Array<PropertyChange> array)->{
				if(value === handler){
					handlers.splice(index, 1);
				}
			});
		}
	}
}
